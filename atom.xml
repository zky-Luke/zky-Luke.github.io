<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zky-luke.github.io/"/>
  <updated>2019-06-20T02:48:13.548Z</updated>
  <id>https://zky-luke.github.io/</id>
  
  <author>
    <name>Dennis Yan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SSH Git多账号配置 一分钟上手</title>
    <link href="https://zky-luke.github.io/2019/03/06/Article1/"/>
    <id>https://zky-luke.github.io/2019/03/06/Article1/</id>
    <published>2019-03-06T11:40:17.000Z</published>
    <updated>2019-06-20T02:48:13.548Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用介绍"><a href="#使用介绍" class="headerlink" title="使用介绍"></a>使用介绍</h1><p>默认情况下，一台电脑只有一个SSH Key，假如我们有多个Github账号，需要将代码迁移账号，这时候这篇文章就派上用场啦~</p><h1 id="简单上手"><a href="#简单上手" class="headerlink" title="简单上手"></a>简单上手</h1><h6 id="1-生成秘钥公钥"><a href="#1-生成秘钥公钥" class="headerlink" title="1.生成秘钥公钥"></a>1.生成秘钥公钥</h6><p>装好Git后，桌面右键点击Git Bash进入Git界面，输入以下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//切换到ssh目录</span><br><span class="line">cd ~/.ssh</span><br><span class="line">//新建两个账户的ssh-key</span><br><span class="line">ssh-keygen -t rsa -C 10000@qq.com</span><br><span class="line">ssh-keygen -t rsa -C 20000@qq.com</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/7075647-2be50bd4387788a6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="1.png"></p><p><img src="https://upload-images.jianshu.io/upload_images/7075647-9e392d27302b71e9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="5.png"></p><p>上面先填写Git账户的ssh-key的名称（默认是id_rsa）,下一步则是填写密码及确认密码，不需要密码的话可以直接回车即可。<br>在ssh文件夹已经生成文件，如下<br><img src="https://upload-images.jianshu.io/upload_images/7075647-889e6237b1584b44.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="6.png"></p><h6 id="2-查看秘钥并放到Github账户"><a href="#2-查看秘钥并放到Github账户" class="headerlink" title="2.查看秘钥并放到Github账户"></a>2.查看秘钥并放到Github账户</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 查看秘钥</span><br><span class="line">cat id_rsa_test.pub</span><br><span class="line">cat id_rsa_test2.pub</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/7075647-1923a9f9a778a401.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="3.png"><br>分别添加到两个github账户，详细步骤百度大大搜一搜哈</p><h6 id="3-在ssh目录下创建config并配置"><a href="#3-在ssh目录下创建config并配置" class="headerlink" title="3.在ssh目录下创建config并配置"></a>3.在ssh目录下创建config并配置</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 创建config</span><br><span class="line">touch config</span><br><span class="line">// 查看当前目录</span><br><span class="line">ls</span><br><span class="line">// 编辑config</span><br><span class="line">vim config</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/7075647-56341443598f11f9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="7.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 配置github.com</span><br><span class="line">Host github.com    // 自定义域名地址</span><br><span class="line">    HostName github.com   // 真实域名地址</span><br><span class="line">    IdentityFile C:\Users\Admin\.ssh\id_rsa_test    // id_rsa位置</span><br><span class="line">    PreferredAuthentications publickey    // 权限验证</span><br><span class="line">    User username1    // 用户名</span><br><span class="line"></span><br><span class="line"># 配置git.github2.com </span><br><span class="line">Host github2.com </span><br><span class="line">    HostName github.com</span><br><span class="line">    IdentityFile C:\Users\Admin\.ssh\id_rsa_test2</span><br><span class="line">    PreferredAuthentications publickey</span><br><span class="line">    User username2</span><br></pre></td></tr></table></figure><p>写入如上配置，域名和id_rsa位置要根据实际情况填写，然后保存即可。</p><h6 id="4-测试是否配置成功"><a href="#4-测试是否配置成功" class="headerlink" title="4.测试是否配置成功"></a>4.测试是否配置成功</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 测试配置</span><br><span class="line">ssh -T git@github.com</span><br><span class="line">ssh -T git@github2.com</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/7075647-204eb3988e0cb25a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="8.png"></p><p><img src="https://upload-images.jianshu.io/upload_images/7075647-eb00bd946aaae267.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="9.png"><br>出现上图所示，则表示成功啦~~</p><h1 id="项目迁移"><a href="#项目迁移" class="headerlink" title="项目迁移"></a>项目迁移</h1><p>假如有个旧账号的项目要迁移到新账号，先把旧账号项目的代码克隆下来，在新账号新建个项目，在cmd添加远程仓库的ssh并命名为origin2,使用如下命令强制提交代码，就ok了，好嗨~<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin2 master -f</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/7075647-e0c398d5f591cf3b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="10.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;使用介绍&quot;&gt;&lt;a href=&quot;#使用介绍&quot; class=&quot;headerlink&quot; title=&quot;使用介绍&quot;&gt;&lt;/a&gt;使用介绍&lt;/h1&gt;&lt;p&gt;默认情况下，一台电脑只有一个SSH Key，假如我们有多个Github账号，需要将代码迁移账号，这时候这篇文章就派上用场啦~
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>puppeteer新手入门(chromium下载跳坑)</title>
    <link href="https://zky-luke.github.io/2017/12/27/Article2/"/>
    <id>https://zky-luke.github.io/2017/12/27/Article2/</id>
    <published>2017-12-27T11:44:55.000Z</published>
    <updated>2019-06-20T02:47:03.664Z</updated>
    
    <content type="html"><![CDATA[<h1 id="puppeteer简介"><a href="#puppeteer简介" class="headerlink" title="puppeteer简介"></a>puppeteer简介</h1><p>puppeteer 翻译是操纵木偶的人，利用这个工具，我们能做一个操纵页面的人。puppeteer是一个nodejs的库，支持调用Chrome的API来操纵Web，相比较Selenium或是PhantomJs,它最大的特点就是它的操作Dom可以完全在内存中进行模拟既在V8引擎中处理而不打开浏览器，而且关键是这个是Chrome团队在维护，会拥有更好的兼容性和前景。</p><h1 id="puppeteer功能"><a href="#puppeteer功能" class="headerlink" title="puppeteer功能"></a>puppeteer功能</h1><ul><li>生成页面的截图和PDF。</li><li>抓取SPA并生成预先呈现的内容（即“SSR”）。</li><li>从网站抓取你需要的内容。</li><li>自动表单提交，UI测试，键盘输入等</li><li>创建一个最新的自动化测试环境。使用最新的JavaScript和浏览器功能，直接在最新版本的Chrome中运行测试。</li><li>捕获您的网站的时间线跟踪，以帮助诊断性能问题。</li></ul><h1 id="puppeteer轻松入门"><a href="#puppeteer轻松入门" class="headerlink" title="puppeteer轻松入门"></a>puppeteer轻松入门</h1><h4 id="1-环境和安装"><a href="#1-环境和安装" class="headerlink" title="1. 环境和安装"></a>1. 环境和安装</h4><p>Puppeteer 至少需要 Node v6.4.0，如要使用 async / await，只有 Node v7.6.0 或更高版本才支持。 node下载地址： <a href="https://nodejs.org/zh-cn/" target="_blank" rel="noopener">https://nodejs.org/zh-cn/</a></p><h4 id="2-创建项目"><a href="#2-创建项目" class="headerlink" title="2. 创建项目"></a>2. 创建项目</h4><h6 id="2-1-创建test目录，进入目录执行npm-init"><a href="#2-1-创建test目录，进入目录执行npm-init" class="headerlink" title="2.1 创建test目录，进入目录执行npm init"></a>2.1 创建test目录，进入目录执行npm init</h6><h6 id="2-2-安装-puppeteer"><a href="#2-2-安装-puppeteer" class="headerlink" title="2.2 安装 puppeteer"></a>2.2 安装 puppeteer</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add puppeteer 或者 npm i puppeteer</span><br></pre></td></tr></table></figure><p>可能会出现以下报错:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ERROR: Failed to download Chromium r515411! Set &quot;PUPPETEER_SKIP_CHROMIUM_DOWNLOA</span><br><span class="line">D&quot; env variable to skip download.</span><br></pre></td></tr></table></figure></p><p>是因为在执行安装的过程中需要执行install.js，这里会下载Chromium,官网建议是进行跳过，我们可以执行 —ignore-scripts 忽略这个js执行。也可以通过设置环境变量set PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=1阻止下载 Chromium （因为封网，直接下载会失败）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i --save puppeteer --ignore-scripts</span><br></pre></td></tr></table></figure><h6 id="2-3-手动下载Chromium"><a href="#2-3-手动下载Chromium" class="headerlink" title="2.3 手动下载Chromium"></a>2.3 手动下载Chromium</h6><p>下载地址：<a href="https://download-chromium.appspot.com/" target="_blank" rel="noopener">https://download-chromium.appspot.com/</a>  (打开蓝灯翻墙软件…)</p><p>把下载刚刚下载的文件解压出来会有chrome-win32文件夹，把里面的文件拷贝到项目新建的chromium文件夹中</p><h6 id="2-4-新建index-js（截图功能）-代码如下："><a href="#2-4-新建index-js（截图功能）-代码如下：" class="headerlink" title="2.4 新建index.js（截图功能）, 代码如下："></a>2.4 新建index.js（截图功能）, 代码如下：</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const puppeteer = require(&apos;puppeteer&apos;);</span><br><span class="line"></span><br><span class="line">(async () =&gt; &#123;</span><br><span class="line">    const browser = await puppeteer.launch();</span><br><span class="line">    const page = await browser.newPage();</span><br><span class="line">    await page.goto(&apos;https://y.qq.com&apos;);</span><br><span class="line">    await page.screenshot(&#123;path: &apos;yqq.png&apos;&#125;);</span><br><span class="line">    browser.close();</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>打开cmd执行index.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node index.js</span><br></pre></td></tr></table></figure></p><p>这时候可能出现以下错误：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(node:8672) UnhandledPromiseRejectionWarning: Unhandled promise rejection (rejec</span><br><span class="line">tion id: 1): AssertionError [ERR_ASSERTION]: Chromium revision is not downloaded</span><br><span class="line">. Run &quot;npm install&quot;</span><br><span class="line">(node:8672) [DEP0018] DeprecationWarning: Unhandled promise rejections are depre</span><br><span class="line">cated. In the future, promise rejections that are not handled will terminate the</span><br><span class="line"> Node.js process with a non-zero exit code.</span><br></pre></td></tr></table></figure></p><p>显示chromium 未下载错误，因为chromium默认的下载路径是在node_modules/puppeteer/.local-chromium/目录，这时候我们的chromium是在项目根目录，所以需要配置指定路径，修改index.js文件()：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">const puppeteer = require(&apos;puppeteer&apos;);</span><br><span class="line"></span><br><span class="line">(async () =&gt; &#123;</span><br><span class="line">      const browser = await puppeteer.launch(&#123;</span><br><span class="line">        executablePath: &apos;./chromium/chrome.exe&apos;,</span><br><span class="line">        headless: false</span><br><span class="line">      &#125;);</span><br><span class="line">      const page = await browser.newPage();</span><br><span class="line">      await page.goto(&apos;http://music.163.com/&apos;);</span><br><span class="line">      await page.screenshot(&#123;path: &apos;music.png&apos;&#125;);</span><br><span class="line">      browser.close();</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></p><p>puppeteer launch参数说明：</p><ul><li>executablePath： 运行Chromium或Chrome可执行文件的路径</li><li>headless： 是否运行在浏览器headless模式，true为不打开浏览器执行，默认为true</li><li>timeout： 等待浏览器实例启动的最长时间（以毫秒为单位）。默认为30000（30秒）。通过0禁用超时</li><li>args： 传递给浏览器实例的其他参数</li></ul><p>更多参数请参照<a href="https://github.com/GoogleChrome/puppeteer/blob/master/docs/api.md#class-browser" target="_blank" rel="noopener">官网</a>，再次执行index.js可能出现以下错误：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error: Protocol error (Page.getFrameTree): &apos;Page.getFrameTree&apos; wasn &apos;t found undefined</span><br></pre></td></tr></table></figure></p><p>刚开始找了好久没找到答案，然后上万能的Google找了下，发现了类似的问题<br><img src="http://upload-images.jianshu.io/upload_images/7075647-7451fb48095d39d5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>可能是chromium的版本存在差异，然后重新在<a href="https://download-chromium.appspot.com/" target="_blank" rel="noopener">chromium官网</a>下载最新版本解压到项目（要注意下相应系统chromium）</p><p>执行index.js， 脚本运行chromium浏览器跳转到界面，截图保存到项目中，这样就成功了…</p><h6 id="2-5-puppeteer相关地址"><a href="#2-5-puppeteer相关地址" class="headerlink" title="2.5 puppeteer相关地址"></a>2.5 puppeteer相关地址</h6><p><a href="https://github.com/GoogleChrome/puppeteer/blob/master/docs/api.md#class-browser" target="_blank" rel="noopener">puppeteer神器官方文档</a>，可以进行其他强大的功能开发…</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;puppeteer简介&quot;&gt;&lt;a href=&quot;#puppeteer简介&quot; class=&quot;headerlink&quot; title=&quot;puppeteer简介&quot;&gt;&lt;/a&gt;puppeteer简介&lt;/h1&gt;&lt;p&gt;puppeteer 翻译是操纵木偶的人，利用这个工具，我们能做一个操
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>构建自己的npm包 简单实现</title>
    <link href="https://zky-luke.github.io/2017/07/28/Article4/"/>
    <id>https://zky-luke.github.io/2017/07/28/Article4/</id>
    <published>2017-07-28T11:45:50.000Z</published>
    <updated>2019-06-20T02:47:03.666Z</updated>
    
    <content type="html"><![CDATA[<h1 id="NPM-使用介绍"><a href="#NPM-使用介绍" class="headerlink" title="NPM 使用介绍"></a>NPM 使用介绍</h1><p>NPM是随同NodeJS一起安装的包管理工具，能解决NodeJS代码部署上的很多问题，常见的使用场景有以下几种：</p><ul><li>允许用户从NPM服务器下载别人编写的第三方包到本地使用。</li><li>允许用户从NPM服务器下载并安装别人编写的命令行程序到本地使用。</li><li>允许用户将自己编写的包或命令行程序上传到NPM服务器供别人使用。</li></ul><h1 id="NPM-包构建"><a href="#NPM-包构建" class="headerlink" title="NPM 包构建"></a>NPM 包构建</h1><h6 id="1-创建demo目录，新建index-js文件"><a href="#1-创建demo目录，新建index-js文件" class="headerlink" title="1. 创建demo目录，新建index.js文件"></a>1. 创建demo目录，新建index.js文件</h6><p>index.js文件示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">module.exports.sayHello = function()&#123;</span><br><span class="line">return &quot;Hello World!&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h6 id="2-在项目中引导创建一个package-json文件"><a href="#2-在项目中引导创建一个package-json文件" class="headerlink" title="2.在项目中引导创建一个package.json文件"></a>2.在项目中引导创建一个package.json文件</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure><p>快速创建可以使用npm init -y命令</p><h1 id="注册npm账号"><a href="#注册npm账号" class="headerlink" title="注册npm账号"></a>注册npm账号</h1><h6 id="1-要发布npm包当然需要在npm官网注册一个属于自己的账号"><a href="#1-要发布npm包当然需要在npm官网注册一个属于自己的账号" class="headerlink" title="1.要发布npm包当然需要在npm官网注册一个属于自己的账号"></a>1.要发布npm包当然需要在npm官网注册一个属于自己的账号</h6><p>npm官网地址：  <a href="https://www.npmjs.com" target="_blank" rel="noopener">https://www.npmjs.com</a></p><h6 id="2-在cmd中登录账号"><a href="#2-在cmd中登录账号" class="headerlink" title="2. 在cmd中登录账号"></a>2. 在cmd中登录账号</h6><p>注册成功后，打开cmd进入到demo目录，登录账号：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm login</span><br></pre></td></tr></table></figure></p><p>输入用户密码以及邮箱，登录成功后可以输入查询命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm whoami</span><br></pre></td></tr></table></figure></p><p>就能看到你酷酷的账号名了~~</p><p>附：刚注册完有段时间可以发布npm包，过段时间需要邮箱验证通过才能发布包，不然会报错（无伤大雅~~）</p><h1 id="上传npm包"><a href="#上传npm包" class="headerlink" title="上传npm包"></a>上传npm包</h1><h6 id="1-cmd进到demo目录，输入如下命令："><a href="#1-cmd进到demo目录，输入如下命令：" class="headerlink" title="1. cmd进到demo目录，输入如下命令："></a>1. cmd进到demo目录，输入如下命令：</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm publish</span><br></pre></td></tr></table></figure><p>这时候npm报错大军要来了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm ERR! publish Failed PUT 403</span><br><span class="line">npm ERR! code E403</span><br><span class="line">npm ERR! you do not have permission to publish &quot;demo&quot;. Are you logged in as the</span><br><span class="line">correct user? : demo</span><br></pre></td></tr></table></figure></p><p>这是什么原因？？就是与npm仓库的包名重复了</p><p>改改改~~<br>拿出package.json文件，把name字段值改成下面：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;name&quot;: &quot;testfun&quot;</span><br></pre></td></tr></table></figure></p><p>注意<strong>你的name字段值不要跟我一样</strong>，不然还会包上述错误，避免相同包名就可以啦</p><p><strong>还有一点要注意的是npm对包名的限制：不能有大写字母/空格/下滑线</strong></p><p>上传成功后你就可以在npm官网看到：<br><img src="http://upload-images.jianshu.io/upload_images/7075647-c4f054cb9c234205.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="pic.png"></p><h1 id="npm包管理"><a href="#npm包管理" class="headerlink" title="npm包管理"></a>npm包管理</h1><h6 id="1-管理npm包权限"><a href="#1-管理npm包权限" class="headerlink" title="1. 管理npm包权限"></a>1. 管理npm包权限</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">查看模块拥有者 </span><br><span class="line">$ npm owner ls &lt;package_name&gt; </span><br><span class="line">添加发布者 </span><br><span class="line">$ npm owner add &lt;user&gt; &lt;package_name&gt; </span><br><span class="line">删除发布者 </span><br><span class="line">$ npm owner rm &lt;user&gt; &lt;package_name&gt;</span><br></pre></td></tr></table></figure><h6 id="2-撤销发布包-在项目目录下执行"><a href="#2-撤销发布包-在项目目录下执行" class="headerlink" title="2. 撤销发布包( 在项目目录下执行 )"></a>2. 撤销发布包( 在项目目录下执行 )</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm unpublish --force</span><br></pre></td></tr></table></figure><p>主要是处于安全性考虑，在Azer NPM 撤包事件后，npm公布了一版新的规则，如下：</p><ul><li>版本更新少于24小时的包允许下架；</li><li>超过24小时的包的下架需要联系npm维护者；</li><li>如果有npm维护者参与，npm将检查是否有其他包依赖该包，如果有则不允下架；</li><li>如果某个包的所有版本都被移除，npm会上传一个空的占位包，以防后来的使用者不小心引用怀有恶意的替代者。</li></ul><h6 id="3-npm的版本控制"><a href="#3-npm的版本控制" class="headerlink" title="3. npm的版本控制"></a>3. npm的版本控制</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm version patch</span><br><span class="line">npm version minor</span><br><span class="line">npm version major</span><br></pre></td></tr></table></figure><p>例如：我原本的项目是1.0.0版本的话<br>若是1中情况，变为1.0.1<br>若是2中情况，变为1.1.0<br>若是3中情况，变为2.0.0</p><p>不过也可以在package.json中的version更改~~</p><h1 id="使用npm包"><a href="#使用npm包" class="headerlink" title="使用npm包"></a>使用npm包</h1><h6 id="1-创建test目录，在目录中新建index-js及package-json文件"><a href="#1-创建test目录，在目录中新建index-js及package-json文件" class="headerlink" title="1. 创建test目录，在目录中新建index.js及package.json文件"></a>1. 创建test目录，在目录中新建index.js及package.json文件</h6><p>index.js文件代码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var testfun = require(&quot;testfun&quot;);</span><br><span class="line">console.log(testfun.sayHello());</span><br></pre></td></tr></table></figure></p><h6 id="2-安装testfun包"><a href="#2-安装testfun包" class="headerlink" title="2. 安装testfun包"></a>2. 安装testfun包</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev testfun</span><br></pre></td></tr></table></figure><h6 id="3-在项目目录中cmd输入"><a href="#3-在项目目录中cmd输入" class="headerlink" title="3. 在项目目录中cmd输入"></a>3. 在项目目录中cmd输入</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node index.js</span><br></pre></td></tr></table></figure><p>就可以看到下面的效果啦~</p><p><img src="http://upload-images.jianshu.io/upload_images/7075647-346f8b8a146b4ab2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="pic.png"></p><p>这是运行在node环境，那么像运行在浏览器该怎么弄呢~~<br>这时候就要用到browserify了</p><h1 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h1><h3 id="Browserify"><a href="#Browserify" class="headerlink" title="Browserify"></a>Browserify</h3><h6 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h6><p>Browserify 可以让你使用类似于 node 的 require() 的方式来组织浏览器端的 Javascript 代码，通过<a href="https://baike.baidu.com/item/%E9%A2%84%E7%BC%96%E8%AF%91/3191547" target="_blank" rel="noopener">预编译</a>让前端 Javascript 可以直接使用 Node NPM 安装的一些库。</p><h6 id="2-Browserify是如何工作的"><a href="#2-Browserify是如何工作的" class="headerlink" title="2.Browserify是如何工作的"></a>2.Browserify是如何工作的</h6><ul><li>Browserify从你给你的入口文件开始,寻找所有调用require()方法的地方, 然后沿着<a href="https://en.wikipedia.org/wiki/Abstract_syntax_tree" target="_blank" rel="noopener">抽象语法树</a>,通过 <a href="https://www.npmjs.com/package/detective" target="_blank" rel="noopener">detective</a> 模块来找到所有请求的模块.</li><li>每一个require()调用里都传入一个字符串作为参数,browserify把这个字符串解析成文件的路径然后递归的查找文件直到整个依赖树都被找到.</li><li>每个被require()的文件,它的名字都会被映射到内部的id,最后被整合到一个javascript文件中.</li></ul><h6 id="3-运用到项目"><a href="#3-运用到项目" class="headerlink" title="3. 运用到项目"></a>3. 运用到项目</h6><ul><li><p>全局安装browserify</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g browserify</span><br></pre></td></tr></table></figure></li><li><p>使用browserify</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">browserify index.js &gt; bundle.js</span><br></pre></td></tr></table></figure></li></ul><p>在test目录新建index.html,引入以下js文件:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;bundle.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p>打开index.html就可以看到控制器中的效果啦，这样就用有自己的npm包了(＾ω＾)~~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;NPM-使用介绍&quot;&gt;&lt;a href=&quot;#NPM-使用介绍&quot; class=&quot;headerlink&quot; title=&quot;NPM 使用介绍&quot;&gt;&lt;/a&gt;NPM 使用介绍&lt;/h1&gt;&lt;p&gt;NPM是随同NodeJS一起安装的包管理工具，能解决NodeJS代码部署上的很多问题，常见的
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Electron 快速入门及打包</title>
    <link href="https://zky-luke.github.io/2017/07/26/Article3/"/>
    <id>https://zky-luke.github.io/2017/07/26/Article3/</id>
    <published>2017-07-26T11:45:26.000Z</published>
    <updated>2019-06-20T02:47:03.665Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、初步理解"><a href="#一、初步理解" class="headerlink" title="一、初步理解"></a>一、初步理解</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Electron 可以让你使用纯 JavaScript 调用丰富的原生 APIs 来创造桌面应用。你可以把它看作是专注于桌面应用而不是 web 服务器的，io.js 的一个变体。<br>这不意味着 Electron 是绑定了 GUI 库的 JavaScript。相反，Electron 使用 web 页面作为它的 GUI，所以你能把它看作成一个被 JavaScript 控制的，精简版的 Chromium 浏览器。</p><h2 id="主进程"><a href="#主进程" class="headerlink" title="主进程"></a>主进程</h2><p>在 Electron 里，运行 package.json 里 main 脚本的进程被称为主进程。在主进程运行的脚本可以以创建 web 页面的形式展示 GUI。</p><h2 id="渲染进程"><a href="#渲染进程" class="headerlink" title="渲染进程"></a>渲染进程</h2><p>由于 Electron 使用 Chromium 来展示页面，所以 Chromium 的多进程结构也被充分利用。每个 Electron 的页面都在运行着自己的进程，这样的进程我们称之为渲染进程。<br>在一般浏览器中，网页通常会在沙盒环境下运行，并且不允许访问原生资源。然而，Electron 用户拥有在网页中调用 io.js 的 APIs 的能力，可以与底层操作系统直接交互。</p><h2 id="主进程与渲染进程的区别"><a href="#主进程与渲染进程的区别" class="headerlink" title="主进程与渲染进程的区别"></a>主进程与渲染进程的区别</h2><p>主进程使用 BrowserWindow 实例创建网页。每个 BrowserWindow 实例都在自己的渲染进程里运行着一个网页。当一个 BrowserWindow 实例被销毁后，相应的渲染进程也会被终止。<br>主进程管理所有页面和与之对应的渲染进程。每个渲染进程都是相互独立的，并且只关心他们自己的网页。<br>由于在网页里管理原生 GUI 资源是非常危险而且容易造成资源泄露，所以在网页面调用 GUI 相关的 APIs 是不被允许的。如果你想在网页里使用 GUI 操作，其对应的渲染进程必须与主进程进行通讯，请求主进程进行相关的 GUI 操作。<br>在 Electron，我们提供用于在主进程与渲染进程之间通讯的 <a href="https://github.com/electron/electron/blob/master/docs-translations/zh-CN/api/ipc-main-process.md" target="_blank" rel="noopener">ipc</a> 模块。并且也有一个远程进程调用风格的通讯模块 <a href="https://www.w3cschool.cn/electronmanual/electronmanual-remote.html" target="_blank" rel="noopener">remote</a>。</p><h1 id="二、创建-Electron-应用"><a href="#二、创建-Electron-应用" class="headerlink" title="二、创建 Electron 应用"></a>二、创建 Electron 应用</h1><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">app/</span><br><span class="line">├── package.json     //配置声明文件</span><br><span class="line">├── main.js          //主进程渲染文件</span><br><span class="line">├── renderer.js      //渲染进程文件</span><br><span class="line">└── index.html       //主入口文件</span><br></pre></td></tr></table></figure><h2 id="1-1-创建app目录，在目录中新建index-html及main-js文件（暂时不考虑renderer-js）"><a href="#1-1-创建app目录，在目录中新建index-html及main-js文件（暂时不考虑renderer-js）" class="headerlink" title="1.1 创建app目录，在目录中新建index.html及main.js文件（暂时不考虑renderer.js）"></a>1.1 创建app目录，在目录中新建index.html及main.js文件（暂时不考虑renderer.js）</h2><p>index.html文件示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Hello World!&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;h1&gt;Hello World!&lt;/h1&gt;</span><br><span class="line">    &lt;!-- All of the Node.js APIs are available in this renderer process. --&gt;</span><br><span class="line">    We are using Node.js &lt;script&gt;document.write(process.versions.node)&lt;/script&gt;,</span><br><span class="line">    Chromium &lt;script&gt;document.write(process.versions.chrome)&lt;/script&gt;,</span><br><span class="line">    and Electron &lt;script&gt;document.write(process.versions.electron)&lt;/script&gt;.</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">     //require(&apos;./renderer.js&apos;)</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>main.js文件示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">// var app = require(&apos;app&apos;);  // 控制应用生命周期的模块。</span><br><span class="line">// var BrowserWindow = require(&apos;browser-window&apos;);  // 创建原生浏览器窗口的模块</span><br><span class="line"></span><br><span class="line">const electron = require(&apos;electron&apos;);</span><br><span class="line">const app = electron.app;</span><br><span class="line">const BrowserWindow = electron.BrowserWindow;</span><br><span class="line"></span><br><span class="line">// 保持一个对于 window 对象的全局引用，不然，当 JavaScript 被 GC，</span><br><span class="line">// window 会被自动地关闭</span><br><span class="line">var mainWindow = null;</span><br><span class="line"></span><br><span class="line">// 当所有窗口被关闭了，退出。</span><br><span class="line">app.on(&apos;window-all-closed&apos;, function() &#123;</span><br><span class="line">  // 在 OS X 上，通常用户在明确地按下 Cmd + Q 之前</span><br><span class="line">  // 应用会保持活动状态</span><br><span class="line">  if (process.platform != &apos;darwin&apos;) &#123;</span><br><span class="line">    app.quit();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 当 Electron 完成了初始化并且准备创建浏览器窗口的时候</span><br><span class="line">// 这个方法就被调用</span><br><span class="line">app.on(&apos;ready&apos;, function() &#123;</span><br><span class="line">  // 创建浏览器窗口。</span><br><span class="line">  mainWindow = new BrowserWindow(&#123;width: 800, height: 600&#125;);</span><br><span class="line"></span><br><span class="line">  // 加载应用的 index.html</span><br><span class="line">  mainWindow.loadURL(&apos;file://&apos; + __dirname + &apos;/index.html&apos;);</span><br><span class="line"></span><br><span class="line">  // 打开开发工具</span><br><span class="line">  mainWindow.openDevTools();</span><br><span class="line"></span><br><span class="line">  // 当 window 被关闭，这个事件会被发出</span><br><span class="line">  mainWindow.on(&apos;closed&apos;, function() &#123;</span><br><span class="line">    // 取消引用 window 对象，如果你的应用支持多窗口的话，</span><br><span class="line">    // 通常会把多个 window 对象存放在一个数组里面，</span><br><span class="line">    // 但这次不是。</span><br><span class="line">    mainWindow = null;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h2 id="1-2-创建配置文件package-json-npm-init-y"><a href="#1-2-创建配置文件package-json-npm-init-y" class="headerlink" title="1.2 创建配置文件package.json ( npm init -y )"></a>1.2 创建配置文件package.json ( npm init -y )</h2><blockquote><p>package.json的格式和 Node 的完全一致，并且那个被 main 字段声明的脚本文件是你的应用的启动脚本，它运行在主进程上。你应用里的 package.json 看起来应该像：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;    : &quot;app&quot;,</span><br><span class="line">  &quot;version&quot; : &quot;1.0.1&quot;,</span><br><span class="line">  &quot;main&quot;    : &quot;main.js&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="三、运行-Electron-应用"><a href="#三、运行-Electron-应用" class="headerlink" title="三、运行 Electron 应用"></a>三、运行 Electron 应用</h1><h2 id="安装electron-prebuilt运行项目"><a href="#安装electron-prebuilt运行项目" class="headerlink" title="安装electron-prebuilt运行项目"></a>安装electron-prebuilt运行项目</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install electron-prebuilt -save</span><br></pre></td></tr></table></figure><h2 id="你只需要按照如下方式直接运行你的应用"><a href="#你只需要按照如下方式直接运行你的应用" class="headerlink" title="你只需要按照如下方式直接运行你的应用"></a>你只需要按照如下方式直接运行你的应用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">electron .</span><br></pre></td></tr></table></figure><p>程序执行成功了…</p><p><img src="http://upload-images.jianshu.io/upload_images/7075647-4bb373961c7aff8c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="22.png"></p><h1 id="四、Electron-应用打包"><a href="#四、Electron-应用打包" class="headerlink" title="四、Electron 应用打包"></a>四、Electron 应用打包</h1><h2 id="安装electron-packager"><a href="#安装electron-packager" class="headerlink" title="安装electron-packager"></a>安装electron-packager</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install electron-packager --save-dev</span><br></pre></td></tr></table></figure><p>安装后可以在package.json中看到:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;devDependencies&quot;: &#123;</span><br><span class="line">    &quot;electron-packager&quot;: &quot;^8.7.2&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="打包阶段（有两种方法）"><a href="#打包阶段（有两种方法）" class="headerlink" title="打包阶段（有两种方法）"></a>打包阶段（有两种方法）</h2><h2 id="1-1-直接用命令打包"><a href="#1-1-直接用命令打包" class="headerlink" title="1.1 直接用命令打包"></a>1.1 直接用命令打包</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">electron-packager &lt;location of project&gt; &lt;name of project&gt; &lt;platform&gt; &lt;architecture&gt; &lt;electron version&gt; &lt;optional options&gt;</span><br></pre></td></tr></table></figure><p>命令说明： </p><ul><li>location of project：项目所在路径 </li><li>name of project：打包的项目名字 </li><li>platform：确定了你要构建哪个平台的应用（Windows、Mac 还是 <a href="http://lib.csdn.net/base/linux" target="_blank" rel="noopener">Linux</a>） </li><li>architecture：决定了使用 x86 还是 x64 还是两个<a href="http://lib.csdn.net/base/architecture" target="_blank" rel="noopener">架构</a>都用 </li><li>electron version：electron 的版本 </li><li>optional options：可选选项</li></ul><p>命令比较长，每次要是都用这个命令来打包会很烦，可以使用第二种方法；</p><h2 id="1-2-首先在项目根目录下面的-package-json的scripts-下添加代码"><a href="#1-2-首先在项目根目录下面的-package-json的scripts-下添加代码" class="headerlink" title="1.2 首先在项目根目录下面的 package.json的scripts 下添加代码"></a>1.2 首先在项目根目录下面的 package.json的scripts 下添加代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;packager&quot;: &quot;electron-packager ./ HelloWorld --all --out ./outApp --version 1.4.0 --overwrite --icon=./app/img/icon/icon.ico&quot;</span><br></pre></td></tr></table></figure><p>–all 可以换成 –platform=win32 –arch=ia32</p><blockquote><ul><li>platform 是发布平台<ul><li>win32指windows平台</li><li>linux</li><li>darwin</li></ul></li><li>arch=ia32  指32位windows 64位的则为x64</li></ul></blockquote><h2 id="在项目中新建outApp目录"><a href="#在项目中新建outApp目录" class="headerlink" title="在项目中新建outApp目录"></a>在项目中新建outApp目录</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">app/</span><br><span class="line">├── package.json   </span><br><span class="line">├── node_modules   </span><br><span class="line">├── outApp  </span><br><span class="line">├── main.js          </span><br><span class="line">├── renderer.js      </span><br><span class="line">└── index.html</span><br></pre></td></tr></table></figure><h2 id="使用命令-npm-run-script-packager"><a href="#使用命令-npm-run-script-packager" class="headerlink" title="使用命令 npm run-script packager"></a>使用命令 npm run-script packager</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run-script packager</span><br></pre></td></tr></table></figure><p>打包命令执行后，可能会遇到如下问题：</p><blockquote><p>Packaging app for platform win32 ia32 using electron v1.0.1<br>Downloading tmp-1156-0-electron-v1.0.1-win32-x64.zip<br>Error: connect ETIMEDOUT 52.216.0.16:443<br>connect ETIMEDOUT 52.216.0.16:443</p></blockquote><p>这时候需要做的是翻墙（打开蓝灯翻墙软件），多执行几次npm run-script packager，就可以成功了</p><p>成功截图如下：</p><p><img src="http://upload-images.jianshu.io/upload_images/7075647-6a7acae7eb249639.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="23.png"></p><p>打包成功啦~~</p><p>github源码地址：<a href="https://github.com/zky-Luke/electron" target="_blank" rel="noopener">https://github.com/zky-Luke/electron</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一、初步理解&quot;&gt;&lt;a href=&quot;#一、初步理解&quot; class=&quot;headerlink&quot; title=&quot;一、初步理解&quot;&gt;&lt;/a&gt;一、初步理解&lt;/h1&gt;&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;
      
    
    </summary>
    
    
  </entry>
  
</feed>
